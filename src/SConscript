# SConscript

import os

env = Environment()

platform = env['PLATFORM']

# Clang
if platform == 'darwin':
    # SCons invokes 'gcc' normally on OS X.
    # Usually this is just clang but with options that we don't need.
    env['CC'] = 'clang'
    env.Append(CCFLAGS = [
            '-Weverything', '-Werror', '-O3', '-g',
        ])

# GCC
if platform == 'posix':
    env.Append(
        CCFLAGS = [
            '-Wall', '-Wextra', '-Wpedantic', '-Werror', '-g',
            '-fsanitize=address,undefined',
        ],
        LIBS = ['asan', 'ubsan', 'm', 'bsd'],
    )

# MSVC
if platform == 'win32':
    env.Append(
        CCFLAGS = ['/W4', '/WX', '/Ox'],
        CPPDEFINES = ['_CRT_RAND_S'],
    )

# for color terminal output when available
if 'TERM' in os.environ:
    env['ENV']['TERM'] = os.environ['TERM']

getline = env.StaticLibrary('getline.c')
vector = env.StaticLibrary('vector.c')
heap = env.StaticLibrary(['heap.c', 'vector.c'])

programs = [
    # Chapter 1
    'hello.c',
    'charhist.c',
    'chario.c',
    'decomment.c',
    ['detab.c', getline],
    ['entab.c', getline],
    'fold.c',
    ['lines.c', getline],
    'maxline_extern.c',
    'power.c',
    ['simplecheck.c', vector],
    'temperature.c',
    'wc.c',
    'wlhist.c',
    'words.c',
    'count_digits_and_space.c',

    # Chapter 2
    'atoi.c',
    'bits.c',
    'limits.c',
    'misc.c',
    ['strs_test.c', 'strs.c'],

    # Chapter 3
    'control.c',
    ['escape.c'],
    ['expand.c', getline],
    'shellsort.c',
    ['unescape.c'],

    # Chapter 4
    'atof.c',
    ['matcher.c', getline],
    'qsort.c',
    'recur.c',
    'rpn_char.c',
    ['rpn.c', getline, vector],
    'swap.c',

    # Chapter 5
    'dates.c',
    'getint.c',
    ['sort.c', getline, heap],
    'strcmp.c',
    'strcpy.c',
    'alloc.c',
    'echo.c',
    ['find.c', getline],
    ['expr.c', vector],

    # Miscellaneous
    ['test_heap.c', heap]
]

for p in programs:
    env.Program(p)
